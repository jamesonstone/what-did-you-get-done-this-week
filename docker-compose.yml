version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: whatdidyougetdone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.scheduler
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=whatdidyougetdone
      - AWS_REGION=us-east-1
      - AWS_SES_REGION=us-east-1
      - EMAIL_FROM=no-reply@whatdidyougetdone.dev
      - LLM_PROVIDER=amazon_bedrock
      - LLM_MODEL=anthropic.claude-3-haiku-20240307-v1:0
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - aws_credentials:/root/.aws:ro
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: unless-stopped

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
    environment:
      - SERVICES=ses,s3,lambda
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - localstack_data:/tmp/localstack
    restart: unless-stopped

volumes:
  postgres_data:
  localstack_data:
  aws_credentials: